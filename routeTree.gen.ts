/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/main'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const HomeLazyImport = createFileRoute('/home')()
const TasksIndexLazyImport = createFileRoute('/tasks/')()
const TasksTaskIdLazyImport = createFileRoute('/tasks/$taskId')()
const ProfileProfileLazyImport = createFileRoute('/profile/profile')()

// Create/Update Routes

const HomeLazyRoute = HomeLazyImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))

const MainRoute = MainImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexLazyRoute = TasksIndexLazyImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tasks/index.lazy').then((d) => d.Route))

const TasksTaskIdLazyRoute = TasksTaskIdLazyImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tasks/$taskId.lazy').then((d) => d.Route))

const ProfileProfileLazyRoute = ProfileProfileLazyImport.update({
  id: '/profile/profile',
  path: '/profile/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/profile.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/profile': {
      id: '/profile/profile'
      path: '/profile/profile'
      fullPath: '/profile/profile'
      preLoaderRoute: typeof ProfileProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/profile/profile': typeof ProfileProfileLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/tasks': typeof TasksIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/profile/profile': typeof ProfileProfileLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/tasks': typeof TasksIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/profile/profile': typeof ProfileProfileLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/tasks/': typeof TasksIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/main'
    | '/home'
    | '/profile/profile'
    | '/tasks/$taskId'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/main' | '/home' | '/profile/profile' | '/tasks/$taskId' | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/main'
    | '/home'
    | '/profile/profile'
    | '/tasks/$taskId'
    | '/tasks/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRoute
  HomeLazyRoute: typeof HomeLazyRoute
  ProfileProfileLazyRoute: typeof ProfileProfileLazyRoute
  TasksTaskIdLazyRoute: typeof TasksTaskIdLazyRoute
  TasksIndexLazyRoute: typeof TasksIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRoute,
  HomeLazyRoute: HomeLazyRoute,
  ProfileProfileLazyRoute: ProfileProfileLazyRoute,
  TasksTaskIdLazyRoute: TasksTaskIdLazyRoute,
  TasksIndexLazyRoute: TasksIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/main",
        "/home",
        "/profile/profile",
        "/tasks/$taskId",
        "/tasks/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/main": {
      "filePath": "main.tsx"
    },
    "/home": {
      "filePath": "home.lazy.tsx"
    },
    "/profile/profile": {
      "filePath": "profile/profile.lazy.tsx"
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId.lazy.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
