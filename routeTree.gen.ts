/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/main'
import { Route as IndexRouteImport } from './routes/index'

const HomeLazyRouteImport = createFileRoute('/home')()
const TasksIndexLazyRouteImport = createFileRoute('/tasks/')()
const LoginIndexLazyRouteImport = createFileRoute('/login/')()
const FoldersIndexLazyRouteImport = createFileRoute('/folders/')()
const TasksTaskIdLazyRouteImport = createFileRoute('/tasks/$taskId')()
const FoldersFolderIdLazyRouteImport = createFileRoute('/folders/$folderId')()

const HomeLazyRoute = HomeLazyRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))
const MainRoute = MainRouteImport.update({
  id: '/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexLazyRoute = TasksIndexLazyRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/tasks/index.lazy').then((d) => d.Route))
const LoginIndexLazyRoute = LoginIndexLazyRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))
const FoldersIndexLazyRoute = FoldersIndexLazyRouteImport.update({
  id: '/folders/',
  path: '/folders/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/folders/index.lazy').then((d) => d.Route))
const TasksTaskIdLazyRoute = TasksTaskIdLazyRouteImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/tasks/$taskId.lazy').then((d) => d.Route))
const FoldersFolderIdLazyRoute = FoldersFolderIdLazyRouteImport.update({
  id: '/folders/$folderId',
  path: '/folders/$folderId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/folders/$folderId.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/folders/$folderId': typeof FoldersFolderIdLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/folders': typeof FoldersIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/tasks': typeof TasksIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/folders/$folderId': typeof FoldersFolderIdLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/folders': typeof FoldersIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/tasks': typeof TasksIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/main': typeof MainRoute
  '/home': typeof HomeLazyRoute
  '/folders/$folderId': typeof FoldersFolderIdLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdLazyRoute
  '/folders/': typeof FoldersIndexLazyRoute
  '/login/': typeof LoginIndexLazyRoute
  '/tasks/': typeof TasksIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/main'
    | '/home'
    | '/folders/$folderId'
    | '/tasks/$taskId'
    | '/folders'
    | '/login'
    | '/tasks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/main'
    | '/home'
    | '/folders/$folderId'
    | '/tasks/$taskId'
    | '/folders'
    | '/login'
    | '/tasks'
  id:
    | '__root__'
    | '/'
    | '/main'
    | '/home'
    | '/folders/$folderId'
    | '/tasks/$taskId'
    | '/folders/'
    | '/login/'
    | '/tasks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRoute
  HomeLazyRoute: typeof HomeLazyRoute
  FoldersFolderIdLazyRoute: typeof FoldersFolderIdLazyRoute
  TasksTaskIdLazyRoute: typeof TasksTaskIdLazyRoute
  FoldersIndexLazyRoute: typeof FoldersIndexLazyRoute
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute
  TasksIndexLazyRoute: typeof TasksIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/main': {
      id: '/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/folders/': {
      id: '/folders/'
      path: '/folders'
      fullPath: '/folders'
      preLoaderRoute: typeof FoldersIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/folders/$folderId': {
      id: '/folders/$folderId'
      path: '/folders/$folderId'
      fullPath: '/folders/$folderId'
      preLoaderRoute: typeof FoldersFolderIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRoute,
  HomeLazyRoute: HomeLazyRoute,
  FoldersFolderIdLazyRoute: FoldersFolderIdLazyRoute,
  TasksTaskIdLazyRoute: TasksTaskIdLazyRoute,
  FoldersIndexLazyRoute: FoldersIndexLazyRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  TasksIndexLazyRoute: TasksIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
